import telebot
from telebot import types
import sqlite3
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('8468296516:AAEYsvMdr_qFOGKIS_qu5J4JB_rzC-Pmgrs')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    'PAYMENT_GROUP_ID': -4877778456, # —Ç–µ—Å—Ç –±–æ—Ç–∞
    'ADMIN_ID': 5121921650, # —è
    'DB_NAME': 'balances.db',
    'PAYMENT_DETAILS': {
        'phone': '+7 XXX XXX XX XX',
        'bank': 'XXX-–±–∞–Ω–∫',
        'account': 'XXXX XXXX XXXX XXXX',
        'recipient': '–ò–≤–∞–Ω–æ–≤ –ò.–ò.'},
    'SERVICES': {
            '–¢–æ–≤–∞—Ä 1': {
                'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 1\n–¶–µ–Ω–∞: 1000 —Ä—É–±.',
                'price': 1000,
                'btn_pay': 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¢–æ–≤–∞—Ä 1'
            },
            '–¢–æ–≤–∞—Ä 2': {
                'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 2\n–¶–µ–Ω–∞: 2000 —Ä—É–±.',
                'price': 2000,
                'btn_pay': 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¢–æ–≤–∞—Ä 2'
            },
            '–¢–æ–≤–∞—Ä 3': {
                'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 3\n–¶–µ–Ω–∞: 3000 —Ä—É–±.',
                'price': 3000,
                'btn_pay': 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¢–æ–≤–∞—Ä 3'
            }
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(CONFIG['DB_NAME'], check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  username TEXT,
                  first_name TEXT,
                  last_name TEXT,
                  balance REAL DEFAULT 0,
                  registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS payments
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  amount REAL,
                  status TEXT DEFAULT 'pending',
                  screenshot_id TEXT,
                  date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  FOREIGN KEY(user_id) REFERENCES users(user_id))''')

    conn.commit()
    return conn, cursor
conn, cursor = init_db()

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserState:
    def __init__(self):
        self.states = {}

    def set_state(self, user_id, state, data=None):
        self.states[user_id] = {'state': state, 'data': data or {}}

    def get_state(self, user_id):
        return self.states.get(user_id)

    def clear_state(self, user_id):
        if user_id in self.states:
            del self.states[user_id]
user_state = UserState()


# –£—Ç–∏–ª–∏—Ç—ã
def create_user_if_not_exists(user):
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
                   (user.id, user.username, user.first_name, user.last_name))
    conn.commit()
def get_balance(user_id):
    cursor.execute("SELECT balance FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0.0


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–£—Å–ª—É–≥–∏"),
               types.KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
               types.KeyboardButton("–û –±–æ—Ç–µ"),
               types.KeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å"))
    return markup
def services_menu_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–¢–æ–≤–∞—Ä 1"),
               types.KeyboardButton("–¢–æ–≤–∞—Ä 2"),
               types.KeyboardButton("–¢–æ–≤–∞—Ä 3"),
               types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return markup
def back_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return markup
def admin_actions_keyboard(payment_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{payment_id}"),
               types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{payment_id}"))
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    create_user_if_not_exists(message.from_user)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=main_menu_keyboard())


@bot.message_handler(func=lambda m: m.text == "–û –±–æ—Ç–µ")
def about_bot(message):
    bot.send_message(message.chat.id, "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ "
                                      "–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤ –ù–ü–î(—Å–∞–º–æ–∑–∞–Ω—è—Ç—ã—Ö)",
                     reply_markup=back_keyboard())


@bot.message_handler(func=lambda m: m.text == "–ù–∞–∑–∞–¥")
def handle_back(message):
    user_state.clear_state(message.from_user.id)
    bot.send_message(message.chat.id, "–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ –∫—É–¥–∞ –ø–æ–π–¥–µ—à—å –¥–∞–ª—å—à–µ", reply_markup=main_menu_keyboard())


@bot.message_handler(func=lambda m: m.text == "–ú–æ–π –±–∞–ª–∞–Ω—Å")
def show_balance(message):
    balance = get_balance(message.from_user.id)
    bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.", reply_markup=main_menu_keyboard())


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£—Å–ª—É–≥–∏"
@bot.message_handler(func=lambda m: m.text == "–£—Å–ª—É–≥–∏")
def show_services(message):
    bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:",reply_markup=services_menu_keyboard())

@bot.message_handler(func=lambda m: m.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
def handle_top_up_balance(message):

    payment_text = (
        "–û–ø–ª–∞—Ç–∏—Ç–µ –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n\n"
        f"1. –ü–µ—Ä–µ–≤–æ–¥–æ–º –ø–æ –Ω–æ–º–µ—Ä—É \n{CONFIG['PAYMENT_DETAILS']['phone']} \n{CONFIG['PAYMENT_DETAILS']['bank']} \n{CONFIG['PAYMENT_DETAILS']['recipient']}\n\n"
        f"2. –ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ —Å—á–µ—Ç \n{CONFIG['PAYMENT_DETAILS']['account']} \n{CONFIG['PAYMENT_DETAILS']['bank']} \n{CONFIG['PAYMENT_DETAILS']['recipient']}\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω, –≥–¥–µ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ:\n"
        "- –í–∞—à–µ –∏–º—è\n- –°—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞\n- –î–∞—Ç—É –ø–µ—Ä–µ–≤–æ–¥–∞\n\n"
        "–ò —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º"
    )

    bot.send_message(message.chat.id, payment_text, reply_markup=back_keyboard())
    bot.send_message(message.chat.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")

    user_state.set_state(message.from_user.id, "waiting_amount")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
@bot.message_handler(func=lambda m: m.text in CONFIG['SERVICES'])
def handle_service_selection(message):
    service_name = message.text
    service = CONFIG['SERVICES'][service_name]

    response = (f"üõí {service_name}\n\n"
                f"{service['description']}\n\n"
                f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    markup.add(
        types.KeyboardButton(service['btn_pay']),  # –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
        types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º"),
        types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    )

    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º")
def back_to_services(message):
    user_state.clear_state(message.from_user.id)
    show_services(message)

@bot.message_handler(func=lambda m: m.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    user_state.clear_state(message.from_user.id)
    bot.send_message(message.chat.id, "–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ –∫—É–¥–∞ –ø–æ–π–¥–µ—à—å –¥–∞–ª—å—à–µ", reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
@bot.message_handler(func=lambda m: any(
    m.text == service['btn_pay'] for service in CONFIG['SERVICES'].values()
))
def handle_payment_button(message):
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è
    for service_name, service in CONFIG['SERVICES'].items():
        if message.text == service['btn_pay']:
            process_payment(message, service_name)
            break


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
def process_payment(message, product_name):
    product = CONFIG['SERVICES'][product_name]
    balance = get_balance(message.from_user.id)

    if balance >= product['price']:
        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id=?",
                       (product['price'], message.from_user.id))
        conn.commit()

        bot.send_message(message.chat.id,
                         f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{product_name}' –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
                         f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {product['price']} —Ä—É–±.\n"
                         f"üí≥ –û—Å—Ç–∞—Ç–æ–∫: {balance - product['price']} —Ä—É–±.")
    else:
        bot.send_message(message.chat.id,
                         f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n"
                         f"üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n"
                         f"üìå –ù—É–∂–Ω–æ –µ—â—ë: {product['price'] - balance} —Ä—É–±.\n\n"
                         f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üõí –ï—â—ë —É—Å–ª—É–≥–∏"), types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))


@bot.message_handler(func=lambda m: user_state.get_state(m.from_user.id) and
                                    user_state.get_state(m.from_user.id)['state'] == 'waiting_amount')
def handle_amount(message):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError

        user_state.set_state(message.from_user.id, 'waiting_screenshot', {'amount': amount})
        bot.send_message(message.chat.id, f"–û–∂–∏–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±.",
                         reply_markup=back_keyboard())

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000)")
        user_state.clear_state(message.from_user.id)


@bot.message_handler(content_types=['photo'],
                     func=lambda m: user_state.get_state(m.from_user.id) and
                                    user_state.get_state(m.from_user.id)['state'] == 'waiting_screenshot')
def handle_payment_screenshot(message):
    try:
        state_data = user_state.get_state(message.from_user.id)['data']
        amount = state_data['amount']
        file_id = message.photo[-1].file_id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        cursor.execute("INSERT INTO payments (user_id, amount, screenshot_id) VALUES (?, ?, ?)",
                       (message.from_user.id, amount, file_id))
        conn.commit()
        payment_id = cursor.lastrowid

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        user = message.from_user
        caption = (
            f"–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ #{payment_id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–Ω–µ—Ç'}\n"
            f"–ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
            f"ID: {user.id}\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        bot.send_photo(
            CONFIG['PAYMENT_GROUP_ID'],
            file_id,
            caption=caption,
            reply_markup=admin_actions_keyboard(payment_id)
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state.clear_state(message.from_user.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())


@bot.callback_query_handler(func=lambda call: True)
def handle_admin_callback(call):
    if call.from_user.id != CONFIG['ADMIN_ID']:
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return

    action, payment_id = call.data.split('_')
    payment_id = int(payment_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    cursor.execute("SELECT user_id, amount FROM payments WHERE id=?", (payment_id,))
    payment = cursor.fetchone()

    if not payment:
        bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    user_id, amount = payment

    if action == 'approve':
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, user_id))
            cursor.execute("UPDATE payments SET status='approved' WHERE id=?", (payment_id,))
            conn.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(user_id,
                             f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} —Ä—É–±.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ #{payment_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–°—É–º–º–∞: {amount} —Ä—É–±.",
                reply_markup=None
            )

            bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!")

    elif action == 'reject':
        try:
            cursor.execute("UPDATE payments SET status='rejected' WHERE id=?", (payment_id,))
            conn.commit()

            bot.send_message(user_id, f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–∞ {amount} —Ä—É–±. –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω –ø–ª–∞—Ç–µ–∂ #{payment_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–°—É–º–º–∞: {amount} —Ä—É–±.",
                reply_markup=None
            )

            bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω!")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!")


if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)